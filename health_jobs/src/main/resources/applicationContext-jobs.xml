<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!--<context:component-scan base-package="cn.itcast.jobs"></context:component-scan>-->
    <!--指定应用名称-->
    <dubbo:application name="health_jobs"></dubbo:application>
    <!--指定服务注册中心地址-->
    <dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
    <!--注册注解驱动-->
    <dubbo:annotation package="cn.itcast.jobs"></dubbo:annotation>
    <dubbo:consumer timeout="600000" check="false"/>
    <bean id="jobDemo" class="cn.itcast.jobs.JobDemo"></bean>
    <!--注册jobDetail,作用是负责通过反射调用指定的job-->
    <bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--注入目标对象-->
        <property name="targetObject" ref="jobDemo"></property>
        <!--注入目标方法-->
        <property name="targetMethod" value="run"></property>
    </bean>

    <!--注册jobDetail,作用是负责通过反射调用指定的job-->
    <!--清理数据库中的内容-->
    <bean id="jobDetailClear" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--注入目标对象-->
        <property name="targetObject" ref="jobDemo"></property>
        <!--注入目标方法-->
        <property name="targetMethod" value="clear"></property>
    </bean>

    <!--注册一个触发器,指定任务触发的时间-->
    <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!--注入jobdetail-->
        <property name="jobDetail" ref="jobDetail"></property>
        <!--指定触发的时间,给予cron表达式-->
        <property name="cronExpression">
            <!--每小时执行一次-->
            <value>0 0 * * * ? *</value>
            <!--0 0 2 * * ?-->
        </property>
    </bean>
    <!--清理数据库过期的记录的触发器-->
    <bean id="cronTriggerClear" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!--注入jobdetail-->
        <property name="jobDetail" ref="jobDetailClear"></property>
        <!--指定触发的时间,给予cron表达式-->
        <property name="cronExpression">
            <!--每月底凌晨两点执行-->
            <value>0 0 2 L * ? </value>
            <!--0 0 2 * * ?-->
            <!--测试时间每2分钟执行一次-->
            <!--<value>0 0/2 * * * ? *</value>-->
        </property>
    </bean>
    <!--注册一个统一的调度工厂,通过这个调度工厂调度任务-->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--注入多个触发器-->
        <property name="triggers">
            <list>
                <ref bean="cronTrigger"></ref>
                <ref bean="cronTriggerClear"></ref>
            </list>
        </property>
    </bean>
</beans>